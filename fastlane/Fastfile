# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# TODO: Could not find the iOS 12
before_all do |lane, opts|

  # Need to use UTF-8 when using xcpretty
  Encoding.default_external = Encoding::UTF_8
  Encoding.default_internal = Encoding::UTF_8

  setup_travis if ENV["TRAVIS_CI"]
  
  ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "120"
  ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "10"
end

desc "Executes SDK Unit Tests"
lane :test do
  if ENV['PLATFORM'] == 'mac' # Test using phyiscal device
    scan(
      workspace: ENV['WORKSPACE'],
      scheme: ENV['SCHEME_SDK'],
      destination: ENV['DESTINATION']
    )
  else # Test using simulators
    ENV["DEVICES"].split(',').each do |device|
      scan(
        workspace: ENV['WORKSPACE'],
        scheme: ENV['SCHEME_SDK'],
        device: device,
        code_coverage: true
      )
    end
  end
end

desc "Generates Code Coverage Files"
lane :code_coverage do
  scan(
    workspace: ENV['WORKSPACE'],
    scheme: ENV['SCHEME_SDK'],
    device: ENV['COVERAGE'],
    code_coverage: true
  )

  # Generate code coverage files
  slather(
    travis: ENV["TRAVIS_CI"],
    workspace: ENV['WORKSPACE'],
    proj: ENV['PROJECT_SDK'],
    scheme: ENV['SCHEME_SDK'],
    output_directory: 'fastlane/test_output',
    use_bundle_exec: true,
    cobertura_xml: true,
    decimals: 2,
    verbose: true,
    ignore: "Tests/**/*"
  )
end

desc "Lints a release using Cocoapods"
lane :lint_cocoapods do
  pod_lib_lint(
    podspec: 'PubNubSwift.podspec',
    use_bundle_exec: true,
    verbose: true,
    allow_warnings: true
  )
end

desc "Lints a release using Swift Package Manager"
lane :lint_swift_package_manager do
  Dir.chdir("..") do
    Action.sh('swift build -c release --verbose')
  end
end

desc "Generates Code Coverage Files"
lane :code_coverage_local do
  # Generate code coverage files
  slather(
    travis: ENV["TRAVIS_CI"],
    workspace: ENV['WORKSPACE'],
    proj: ENV['PROJECT_SDK'],
    scheme: ENV['SCHEME_SDK'],
    output_directory: 'fastlane/test_output',
    use_bundle_exec: true,
    html: true,
    decimals: 2,
    verbose: true,
    ignore: "Tests/**/*",
    show: true
  )
end

desc "Builds the SDK Example app"
lane :build_example do
  xcodebuild(
    workspace: ENV['WORKSPACE'],
    scheme: ENV['SCHEME_EXAMPLE'],
    destination: ENV['DESTINATION_EXAMPLE'],
    configuration: "Release",
    build: true
  )
end

desc "Generate Documentation"
lane :generate_docs do
  jazzy(
    config: ".jazzy.yaml"
  )
end
