# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

before_all do |lane, opts|

  # Need to use UTF-8 when using xcpretty
  Encoding.default_external = Encoding::UTF_8
  Encoding.default_internal = Encoding::UTF_8

  setup_ci if ENV["CI"]

  ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "120"
  ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
  ENV["FASTLANE_XCODEBUILD_SETTINGS_RETRIES"] = "10"
end

desc "Executes SDK Unit Tests"
lane :test do
  scan(
    workspace: ENV['WORKSPACE'],
    scheme: ENV['SCHEME_SDK'],
    destination: ENV['DESTINATION']
  )
end

desc "Executes Acceptance Tests"
lane :contract_test do
  scan(
    workspace: ENV['WORKSPACE'],
    scheme: ENV['SCHEME_SDK'],
    destination: ENV['DESTINATION']
  )
end

desc "Executes Integration Tests"
lane :integration_test do
  pub_key = ENV['SDK_PUB_KEY']
  sub_key = ENV['SDK_SUB_KEY']

  set_info_plist_value(
    path: "PubNub.xcodeproj/PubNubTests_Info.plist",
    key: "PubNubPublishKey",
    value: pub_key
  )
  set_info_plist_value(
    path: "PubNub.xcodeproj/PubNubTests_Info.plist",
    key: "PubNubSubscribeKey",
    value: sub_key
  )    

  Dir.chdir("..") do
    # Invoking the integration tests using xcodebuild directly to avoid an issue with the scan method,
    # which is unable to detect the simulator:
    sh "set -o pipefail && env NSUnbufferedIO=YES xcodebuild -workspace PubNub.xcworkspace -scheme PubNubIntegration -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.4' -parallel-testing-enabled NO test 2>&1 | xcpretty"
  end
end

desc "Lints a release using Cocoapods"
lane :lint_cocoapods do
  pod_lib_lint(
    podspec: 'PubNubSwift.podspec',
    verbose: false,
    allow_warnings: true
  )
end

desc "Lints a release using Swift Package Manager"
lane :lint_swift_package_manager do
  Dir.chdir("..") do
    Action.sh('swift build -c release -j 2')
  end
end

desc "Builds SDK example applications"
lane :build_example do
  xcodebuild(
    workspace: ENV['WORKSPACE'],
    scheme: ENV['SCHEME_EXAMPLE'],
    destination: ENV['EXAMPLE_APPS_DESTINATION'],
    configuration: "Release",
    build: true
  )
  xcodebuild(
    workspace: ENV['WORKSPACE'],
    scheme: ENV['SCHEME_GETTING_STARTED_SWIFTUI'],
    destination: ENV['EXAMPLE_APPS_DESTINATION'],
    configuration: "Release",
    build: true
  )
  xcodebuild(
    workspace: ENV['WORKSPACE'],
    scheme: ENV['SCHEME_GETTING_STARTED_UIKIT'],
    destination: ENV['EXAMPLE_APPS_DESTINATION'],
    configuration: "Release",
    build: true
  )
end
